// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.model



class PutBucketInventoryConfigurationRequest private constructor(builder: Builder) {
    /**
     * The name of the bucket where the inventory configuration will be stored.
     */
    val bucket: kotlin.String? = builder.bucket
    /**
     * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
     */
    val expectedBucketOwner: kotlin.String? = builder.expectedBucketOwner
    /**
     * The ID used to identify the inventory configuration.
     */
    val id: kotlin.String? = builder.id
    /**
     * Specifies the inventory configuration.
     */
    val inventoryConfiguration: aws.sdk.kotlin.services.s3.model.InventoryConfiguration? = builder.inventoryConfiguration

    companion object {
        operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.s3.model.PutBucketInventoryConfigurationRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("PutBucketInventoryConfigurationRequest(")
        append("bucket=$bucket,")
        append("expectedBucketOwner=$expectedBucketOwner,")
        append("id=$id,")
        append("inventoryConfiguration=$inventoryConfiguration)")
    }

    override fun hashCode(): kotlin.Int {
        var result = bucket?.hashCode() ?: 0
        result = 31 * result + (expectedBucketOwner?.hashCode() ?: 0)
        result = 31 * result + (id?.hashCode() ?: 0)
        result = 31 * result + (inventoryConfiguration?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as PutBucketInventoryConfigurationRequest

        if (bucket != other.bucket) return false
        if (expectedBucketOwner != other.expectedBucketOwner) return false
        if (id != other.id) return false
        if (inventoryConfiguration != other.inventoryConfiguration) return false

        return true
    }

    inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.s3.model.PutBucketInventoryConfigurationRequest = Builder(this).apply(block).build()

    class Builder {
        /**
         * The name of the bucket where the inventory configuration will be stored.
         */
        var bucket: kotlin.String? = null
        /**
         * The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
         */
        var expectedBucketOwner: kotlin.String? = null
        /**
         * The ID used to identify the inventory configuration.
         */
        var id: kotlin.String? = null
        /**
         * Specifies the inventory configuration.
         */
        var inventoryConfiguration: aws.sdk.kotlin.services.s3.model.InventoryConfiguration? = null

        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.s3.model.PutBucketInventoryConfigurationRequest) : this() {
            this.bucket = x.bucket
            this.expectedBucketOwner = x.expectedBucketOwner
            this.id = x.id
            this.inventoryConfiguration = x.inventoryConfiguration
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.s3.model.PutBucketInventoryConfigurationRequest = PutBucketInventoryConfigurationRequest(this)

        /**
         * construct an [aws.sdk.kotlin.services.s3.model.InventoryConfiguration] inside the given [block]
         */
        fun inventoryConfiguration(block: aws.sdk.kotlin.services.s3.model.InventoryConfiguration.Builder.() -> kotlin.Unit) {
            this.inventoryConfiguration = aws.sdk.kotlin.services.s3.model.InventoryConfiguration.invoke(block)
        }
    }
}
