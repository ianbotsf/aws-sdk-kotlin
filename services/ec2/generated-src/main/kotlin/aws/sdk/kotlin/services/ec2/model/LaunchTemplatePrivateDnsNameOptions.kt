// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the options for instance hostnames.
 */
class LaunchTemplatePrivateDnsNameOptions private constructor(builder: Builder) {
    /**
     * Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
     */
    val enableResourceNameDnsARecord: kotlin.Boolean? = builder.enableResourceNameDnsARecord
    /**
     * Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
     */
    val enableResourceNameDnsAaaaRecord: kotlin.Boolean? = builder.enableResourceNameDnsAaaaRecord
    /**
     * The type of hostname to assign to an instance.
     */
    val hostnameType: aws.sdk.kotlin.services.ec2.model.HostnameType? = builder.hostnameType

    companion object {
        operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.LaunchTemplatePrivateDnsNameOptions = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("LaunchTemplatePrivateDnsNameOptions(")
        append("enableResourceNameDnsARecord=$enableResourceNameDnsARecord,")
        append("enableResourceNameDnsAaaaRecord=$enableResourceNameDnsAaaaRecord,")
        append("hostnameType=$hostnameType)")
    }

    override fun hashCode(): kotlin.Int {
        var result = enableResourceNameDnsARecord?.hashCode() ?: 0
        result = 31 * result + (enableResourceNameDnsAaaaRecord?.hashCode() ?: 0)
        result = 31 * result + (hostnameType?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as LaunchTemplatePrivateDnsNameOptions

        if (enableResourceNameDnsARecord != other.enableResourceNameDnsARecord) return false
        if (enableResourceNameDnsAaaaRecord != other.enableResourceNameDnsAaaaRecord) return false
        if (hostnameType != other.hostnameType) return false

        return true
    }

    inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.LaunchTemplatePrivateDnsNameOptions = Builder(this).apply(block).build()

    class Builder {
        /**
         * Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
         */
        var enableResourceNameDnsARecord: kotlin.Boolean? = null
        /**
         * Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
         */
        var enableResourceNameDnsAaaaRecord: kotlin.Boolean? = null
        /**
         * The type of hostname to assign to an instance.
         */
        var hostnameType: aws.sdk.kotlin.services.ec2.model.HostnameType? = null

        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.LaunchTemplatePrivateDnsNameOptions) : this() {
            this.enableResourceNameDnsARecord = x.enableResourceNameDnsARecord
            this.enableResourceNameDnsAaaaRecord = x.enableResourceNameDnsAaaaRecord
            this.hostnameType = x.hostnameType
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.LaunchTemplatePrivateDnsNameOptions = LaunchTemplatePrivateDnsNameOptions(this)
    }
}
