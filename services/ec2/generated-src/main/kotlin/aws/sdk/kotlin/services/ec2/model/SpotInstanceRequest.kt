// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model

import aws.smithy.kotlin.runtime.time.Instant

/**
 * Describes a Spot Instance request.
 */
class SpotInstanceRequest private constructor(builder: Builder) {
    /**
     * Deprecated.
     */
    val actualBlockHourlyPrice: kotlin.String? = builder.actualBlockHourlyPrice
    /**
     * The Availability Zone group. If you specify the same Availability Zone group for all Spot Instance requests, all Spot Instances are launched in the same Availability Zone.
     */
    val availabilityZoneGroup: kotlin.String? = builder.availabilityZoneGroup
    /**
     * Deprecated.
     */
    val blockDurationMinutes: kotlin.Int? = builder.blockDurationMinutes
    /**
     * The date and time when the Spot Instance request was created, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
     */
    val createTime: aws.smithy.kotlin.runtime.time.Instant? = builder.createTime
    /**
     * The fault codes for the Spot Instance request, if any.
     */
    val fault: aws.sdk.kotlin.services.ec2.model.SpotInstanceStateFault? = builder.fault
    /**
     * The instance ID, if an instance has been launched to fulfill the Spot Instance request.
     */
    val instanceId: kotlin.String? = builder.instanceId
    /**
     * The behavior when a Spot Instance is interrupted.
     */
    val instanceInterruptionBehavior: aws.sdk.kotlin.services.ec2.model.InstanceInterruptionBehavior? = builder.instanceInterruptionBehavior
    /**
     * The instance launch group. Launch groups are Spot Instances that launch together and terminate together.
     */
    val launchGroup: kotlin.String? = builder.launchGroup
    /**
     * Additional information for launching instances.
     */
    val launchSpecification: aws.sdk.kotlin.services.ec2.model.LaunchSpecification? = builder.launchSpecification
    /**
     * The Availability Zone in which the request is launched.
     */
    val launchedAvailabilityZone: kotlin.String? = builder.launchedAvailabilityZone
    /**
     * The product description associated with the Spot Instance.
     */
    val productDescription: aws.sdk.kotlin.services.ec2.model.RiProductDescription? = builder.productDescription
    /**
     * The ID of the Spot Instance request.
     */
    val spotInstanceRequestId: kotlin.String? = builder.spotInstanceRequestId
    /**
     * The maximum price per hour that you are willing to pay for a Spot Instance.
     */
    val spotPrice: kotlin.String? = builder.spotPrice
    /**
     * The state of the Spot Instance request. Spot status information helps track your Spot
     * Instance requests. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html">Spot status in the
     * Amazon EC2 User Guide for Linux Instances.
     */
    val state: aws.sdk.kotlin.services.ec2.model.SpotInstanceState? = builder.state
    /**
     * The status code and status message describing the Spot Instance request.
     */
    val status: aws.sdk.kotlin.services.ec2.model.SpotInstanceStatus? = builder.status
    /**
     * Any tags assigned to the resource.
     */
    val tags: List<Tag>? = builder.tags
    /**
     * The Spot Instance request type.
     */
    val type: aws.sdk.kotlin.services.ec2.model.SpotInstanceType? = builder.type
    /**
     * The start date of the request, in UTC format (for example,
     * YYYY-MM-DDTHH:MM:SSZ).
     * The request becomes active at this date and time.
     */
    val validFrom: aws.smithy.kotlin.runtime.time.Instant? = builder.validFrom
    /**
     * The end date of the request, in UTC format
     * (YYYY-MM-DDTHH:MM:SSZ).
     *
     *
     * For a persistent request, the request remains active until the validUntil date
     * and time is reached. Otherwise, the request remains active until you cancel it.
     *
     *
     * For a one-time request, the request remains active until all instances launch,
     * the request is canceled, or the validUntil date and time is reached. By default, the
     * request is valid for 7 days from the date the request was created.
     */
    val validUntil: aws.smithy.kotlin.runtime.time.Instant? = builder.validUntil

    companion object {
        operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.SpotInstanceRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("SpotInstanceRequest(")
        append("actualBlockHourlyPrice=$actualBlockHourlyPrice,")
        append("availabilityZoneGroup=$availabilityZoneGroup,")
        append("blockDurationMinutes=$blockDurationMinutes,")
        append("createTime=$createTime,")
        append("fault=$fault,")
        append("instanceId=$instanceId,")
        append("instanceInterruptionBehavior=$instanceInterruptionBehavior,")
        append("launchGroup=$launchGroup,")
        append("launchSpecification=$launchSpecification,")
        append("launchedAvailabilityZone=$launchedAvailabilityZone,")
        append("productDescription=$productDescription,")
        append("spotInstanceRequestId=$spotInstanceRequestId,")
        append("spotPrice=$spotPrice,")
        append("state=$state,")
        append("status=$status,")
        append("tags=$tags,")
        append("type=$type,")
        append("validFrom=$validFrom,")
        append("validUntil=$validUntil)")
    }

    override fun hashCode(): kotlin.Int {
        var result = actualBlockHourlyPrice?.hashCode() ?: 0
        result = 31 * result + (availabilityZoneGroup?.hashCode() ?: 0)
        result = 31 * result + (blockDurationMinutes ?: 0)
        result = 31 * result + (createTime?.hashCode() ?: 0)
        result = 31 * result + (fault?.hashCode() ?: 0)
        result = 31 * result + (instanceId?.hashCode() ?: 0)
        result = 31 * result + (instanceInterruptionBehavior?.hashCode() ?: 0)
        result = 31 * result + (launchGroup?.hashCode() ?: 0)
        result = 31 * result + (launchSpecification?.hashCode() ?: 0)
        result = 31 * result + (launchedAvailabilityZone?.hashCode() ?: 0)
        result = 31 * result + (productDescription?.hashCode() ?: 0)
        result = 31 * result + (spotInstanceRequestId?.hashCode() ?: 0)
        result = 31 * result + (spotPrice?.hashCode() ?: 0)
        result = 31 * result + (state?.hashCode() ?: 0)
        result = 31 * result + (status?.hashCode() ?: 0)
        result = 31 * result + (tags?.hashCode() ?: 0)
        result = 31 * result + (type?.hashCode() ?: 0)
        result = 31 * result + (validFrom?.hashCode() ?: 0)
        result = 31 * result + (validUntil?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as SpotInstanceRequest

        if (actualBlockHourlyPrice != other.actualBlockHourlyPrice) return false
        if (availabilityZoneGroup != other.availabilityZoneGroup) return false
        if (blockDurationMinutes != other.blockDurationMinutes) return false
        if (createTime != other.createTime) return false
        if (fault != other.fault) return false
        if (instanceId != other.instanceId) return false
        if (instanceInterruptionBehavior != other.instanceInterruptionBehavior) return false
        if (launchGroup != other.launchGroup) return false
        if (launchSpecification != other.launchSpecification) return false
        if (launchedAvailabilityZone != other.launchedAvailabilityZone) return false
        if (productDescription != other.productDescription) return false
        if (spotInstanceRequestId != other.spotInstanceRequestId) return false
        if (spotPrice != other.spotPrice) return false
        if (state != other.state) return false
        if (status != other.status) return false
        if (tags != other.tags) return false
        if (type != other.type) return false
        if (validFrom != other.validFrom) return false
        if (validUntil != other.validUntil) return false

        return true
    }

    inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.SpotInstanceRequest = Builder(this).apply(block).build()

    class Builder {
        /**
         * Deprecated.
         */
        var actualBlockHourlyPrice: kotlin.String? = null
        /**
         * The Availability Zone group. If you specify the same Availability Zone group for all Spot Instance requests, all Spot Instances are launched in the same Availability Zone.
         */
        var availabilityZoneGroup: kotlin.String? = null
        /**
         * Deprecated.
         */
        var blockDurationMinutes: kotlin.Int? = null
        /**
         * The date and time when the Spot Instance request was created, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
         */
        var createTime: aws.smithy.kotlin.runtime.time.Instant? = null
        /**
         * The fault codes for the Spot Instance request, if any.
         */
        var fault: aws.sdk.kotlin.services.ec2.model.SpotInstanceStateFault? = null
        /**
         * The instance ID, if an instance has been launched to fulfill the Spot Instance request.
         */
        var instanceId: kotlin.String? = null
        /**
         * The behavior when a Spot Instance is interrupted.
         */
        var instanceInterruptionBehavior: aws.sdk.kotlin.services.ec2.model.InstanceInterruptionBehavior? = null
        /**
         * The instance launch group. Launch groups are Spot Instances that launch together and terminate together.
         */
        var launchGroup: kotlin.String? = null
        /**
         * Additional information for launching instances.
         */
        var launchSpecification: aws.sdk.kotlin.services.ec2.model.LaunchSpecification? = null
        /**
         * The Availability Zone in which the request is launched.
         */
        var launchedAvailabilityZone: kotlin.String? = null
        /**
         * The product description associated with the Spot Instance.
         */
        var productDescription: aws.sdk.kotlin.services.ec2.model.RiProductDescription? = null
        /**
         * The ID of the Spot Instance request.
         */
        var spotInstanceRequestId: kotlin.String? = null
        /**
         * The maximum price per hour that you are willing to pay for a Spot Instance.
         */
        var spotPrice: kotlin.String? = null
        /**
         * The state of the Spot Instance request. Spot status information helps track your Spot
         * Instance requests. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html">Spot status in the
         * Amazon EC2 User Guide for Linux Instances.
         */
        var state: aws.sdk.kotlin.services.ec2.model.SpotInstanceState? = null
        /**
         * The status code and status message describing the Spot Instance request.
         */
        var status: aws.sdk.kotlin.services.ec2.model.SpotInstanceStatus? = null
        /**
         * Any tags assigned to the resource.
         */
        var tags: List<Tag>? = null
        /**
         * The Spot Instance request type.
         */
        var type: aws.sdk.kotlin.services.ec2.model.SpotInstanceType? = null
        /**
         * The start date of the request, in UTC format (for example,
         * YYYY-MM-DDTHH:MM:SSZ).
         * The request becomes active at this date and time.
         */
        var validFrom: aws.smithy.kotlin.runtime.time.Instant? = null
        /**
         * The end date of the request, in UTC format
         * (YYYY-MM-DDTHH:MM:SSZ).
         *
         *
         * For a persistent request, the request remains active until the validUntil date
         * and time is reached. Otherwise, the request remains active until you cancel it.
         *
         *
         * For a one-time request, the request remains active until all instances launch,
         * the request is canceled, or the validUntil date and time is reached. By default, the
         * request is valid for 7 days from the date the request was created.
         */
        var validUntil: aws.smithy.kotlin.runtime.time.Instant? = null

        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.SpotInstanceRequest) : this() {
            this.actualBlockHourlyPrice = x.actualBlockHourlyPrice
            this.availabilityZoneGroup = x.availabilityZoneGroup
            this.blockDurationMinutes = x.blockDurationMinutes
            this.createTime = x.createTime
            this.fault = x.fault
            this.instanceId = x.instanceId
            this.instanceInterruptionBehavior = x.instanceInterruptionBehavior
            this.launchGroup = x.launchGroup
            this.launchSpecification = x.launchSpecification
            this.launchedAvailabilityZone = x.launchedAvailabilityZone
            this.productDescription = x.productDescription
            this.spotInstanceRequestId = x.spotInstanceRequestId
            this.spotPrice = x.spotPrice
            this.state = x.state
            this.status = x.status
            this.tags = x.tags
            this.type = x.type
            this.validFrom = x.validFrom
            this.validUntil = x.validUntil
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.SpotInstanceRequest = SpotInstanceRequest(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.SpotInstanceStateFault] inside the given [block]
         */
        fun fault(block: aws.sdk.kotlin.services.ec2.model.SpotInstanceStateFault.Builder.() -> kotlin.Unit) {
            this.fault = aws.sdk.kotlin.services.ec2.model.SpotInstanceStateFault.invoke(block)
        }

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.LaunchSpecification] inside the given [block]
         */
        fun launchSpecification(block: aws.sdk.kotlin.services.ec2.model.LaunchSpecification.Builder.() -> kotlin.Unit) {
            this.launchSpecification = aws.sdk.kotlin.services.ec2.model.LaunchSpecification.invoke(block)
        }

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.SpotInstanceStatus] inside the given [block]
         */
        fun status(block: aws.sdk.kotlin.services.ec2.model.SpotInstanceStatus.Builder.() -> kotlin.Unit) {
            this.status = aws.sdk.kotlin.services.ec2.model.SpotInstanceStatus.invoke(block)
        }
    }
}
