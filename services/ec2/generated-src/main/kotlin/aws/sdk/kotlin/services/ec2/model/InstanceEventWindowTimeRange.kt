// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * The start day and time and the end day and time of the time range, in UTC.
 */
class InstanceEventWindowTimeRange private constructor(builder: Builder) {
    /**
     * The hour when the time range ends.
     */
    val endHour: kotlin.Int? = builder.endHour
    /**
     * The day on which the time range ends.
     */
    val endWeekDay: aws.sdk.kotlin.services.ec2.model.WeekDay? = builder.endWeekDay
    /**
     * The hour when the time range begins.
     */
    val startHour: kotlin.Int? = builder.startHour
    /**
     * The day on which the time range begins.
     */
    val startWeekDay: aws.sdk.kotlin.services.ec2.model.WeekDay? = builder.startWeekDay

    companion object {
        operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.InstanceEventWindowTimeRange = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("InstanceEventWindowTimeRange(")
        append("endHour=$endHour,")
        append("endWeekDay=$endWeekDay,")
        append("startHour=$startHour,")
        append("startWeekDay=$startWeekDay)")
    }

    override fun hashCode(): kotlin.Int {
        var result = endHour ?: 0
        result = 31 * result + (endWeekDay?.hashCode() ?: 0)
        result = 31 * result + (startHour ?: 0)
        result = 31 * result + (startWeekDay?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as InstanceEventWindowTimeRange

        if (endHour != other.endHour) return false
        if (endWeekDay != other.endWeekDay) return false
        if (startHour != other.startHour) return false
        if (startWeekDay != other.startWeekDay) return false

        return true
    }

    inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.InstanceEventWindowTimeRange = Builder(this).apply(block).build()

    class Builder {
        /**
         * The hour when the time range ends.
         */
        var endHour: kotlin.Int? = null
        /**
         * The day on which the time range ends.
         */
        var endWeekDay: aws.sdk.kotlin.services.ec2.model.WeekDay? = null
        /**
         * The hour when the time range begins.
         */
        var startHour: kotlin.Int? = null
        /**
         * The day on which the time range begins.
         */
        var startWeekDay: aws.sdk.kotlin.services.ec2.model.WeekDay? = null

        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.InstanceEventWindowTimeRange) : this() {
            this.endHour = x.endHour
            this.endWeekDay = x.endWeekDay
            this.startHour = x.startHour
            this.startWeekDay = x.startWeekDay
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.InstanceEventWindowTimeRange = InstanceEventWindowTimeRange(this)
    }
}
