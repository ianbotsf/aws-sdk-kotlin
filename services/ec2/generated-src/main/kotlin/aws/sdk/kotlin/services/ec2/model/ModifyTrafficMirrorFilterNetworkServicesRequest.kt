// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ModifyTrafficMirrorFilterNetworkServicesRequest private constructor(builder: Builder) {
    /**
     * The network service, for example Amazon DNS, that you want to mirror.
     */
    val addNetworkServices: List<TrafficMirrorNetworkService>? = builder.addNetworkServices
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: kotlin.Boolean? = builder.dryRun
    /**
     * The network service, for example Amazon DNS, that you no longer want to mirror.
     */
    val removeNetworkServices: List<TrafficMirrorNetworkService>? = builder.removeNetworkServices
    /**
     * The ID of the Traffic Mirror filter.
     */
    val trafficMirrorFilterId: kotlin.String? = builder.trafficMirrorFilterId

    companion object {
        operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.ModifyTrafficMirrorFilterNetworkServicesRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyTrafficMirrorFilterNetworkServicesRequest(")
        append("addNetworkServices=$addNetworkServices,")
        append("dryRun=$dryRun,")
        append("removeNetworkServices=$removeNetworkServices,")
        append("trafficMirrorFilterId=$trafficMirrorFilterId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = addNetworkServices?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (removeNetworkServices?.hashCode() ?: 0)
        result = 31 * result + (trafficMirrorFilterId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as ModifyTrafficMirrorFilterNetworkServicesRequest

        if (addNetworkServices != other.addNetworkServices) return false
        if (dryRun != other.dryRun) return false
        if (removeNetworkServices != other.removeNetworkServices) return false
        if (trafficMirrorFilterId != other.trafficMirrorFilterId) return false

        return true
    }

    inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.ModifyTrafficMirrorFilterNetworkServicesRequest = Builder(this).apply(block).build()

    class Builder {
        /**
         * The network service, for example Amazon DNS, that you want to mirror.
         */
        var addNetworkServices: List<TrafficMirrorNetworkService>? = null
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: kotlin.Boolean? = null
        /**
         * The network service, for example Amazon DNS, that you no longer want to mirror.
         */
        var removeNetworkServices: List<TrafficMirrorNetworkService>? = null
        /**
         * The ID of the Traffic Mirror filter.
         */
        var trafficMirrorFilterId: kotlin.String? = null

        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.ModifyTrafficMirrorFilterNetworkServicesRequest) : this() {
            this.addNetworkServices = x.addNetworkServices
            this.dryRun = x.dryRun
            this.removeNetworkServices = x.removeNetworkServices
            this.trafficMirrorFilterId = x.trafficMirrorFilterId
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.ModifyTrafficMirrorFilterNetworkServicesRequest = ModifyTrafficMirrorFilterNetworkServicesRequest(this)
    }
}
