// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the status of an instance.
 */
class InstanceStatus private constructor(builder: Builder) {
    /**
     * The Availability Zone of the instance.
     */
    val availabilityZone: kotlin.String? = builder.availabilityZone
    /**
     * Any scheduled events associated with the instance.
     */
    val events: List<InstanceStatusEvent>? = builder.events
    /**
     * The ID of the instance.
     */
    val instanceId: kotlin.String? = builder.instanceId
    /**
     * The intended state of the instance. DescribeInstanceStatus requires
     * that an instance be in the running state.
     */
    val instanceState: aws.sdk.kotlin.services.ec2.model.InstanceState? = builder.instanceState
    /**
     * Reports impaired functionality that stems from issues internal to the instance, such
     * as impaired reachability.
     */
    val instanceStatus: aws.sdk.kotlin.services.ec2.model.InstanceStatusSummary? = builder.instanceStatus
    /**
     * The Amazon Resource Name (ARN) of the Outpost.
     */
    val outpostArn: kotlin.String? = builder.outpostArn
    /**
     * Reports impaired functionality that stems from issues related to the systems that
     * support an instance, such as hardware failures and network connectivity problems.
     */
    val systemStatus: aws.sdk.kotlin.services.ec2.model.InstanceStatusSummary? = builder.systemStatus

    companion object {
        operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.InstanceStatus = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("InstanceStatus(")
        append("availabilityZone=$availabilityZone,")
        append("events=$events,")
        append("instanceId=$instanceId,")
        append("instanceState=$instanceState,")
        append("instanceStatus=$instanceStatus,")
        append("outpostArn=$outpostArn,")
        append("systemStatus=$systemStatus)")
    }

    override fun hashCode(): kotlin.Int {
        var result = availabilityZone?.hashCode() ?: 0
        result = 31 * result + (events?.hashCode() ?: 0)
        result = 31 * result + (instanceId?.hashCode() ?: 0)
        result = 31 * result + (instanceState?.hashCode() ?: 0)
        result = 31 * result + (instanceStatus?.hashCode() ?: 0)
        result = 31 * result + (outpostArn?.hashCode() ?: 0)
        result = 31 * result + (systemStatus?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as InstanceStatus

        if (availabilityZone != other.availabilityZone) return false
        if (events != other.events) return false
        if (instanceId != other.instanceId) return false
        if (instanceState != other.instanceState) return false
        if (instanceStatus != other.instanceStatus) return false
        if (outpostArn != other.outpostArn) return false
        if (systemStatus != other.systemStatus) return false

        return true
    }

    inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.InstanceStatus = Builder(this).apply(block).build()

    class Builder {
        /**
         * The Availability Zone of the instance.
         */
        var availabilityZone: kotlin.String? = null
        /**
         * Any scheduled events associated with the instance.
         */
        var events: List<InstanceStatusEvent>? = null
        /**
         * The ID of the instance.
         */
        var instanceId: kotlin.String? = null
        /**
         * The intended state of the instance. DescribeInstanceStatus requires
         * that an instance be in the running state.
         */
        var instanceState: aws.sdk.kotlin.services.ec2.model.InstanceState? = null
        /**
         * Reports impaired functionality that stems from issues internal to the instance, such
         * as impaired reachability.
         */
        var instanceStatus: aws.sdk.kotlin.services.ec2.model.InstanceStatusSummary? = null
        /**
         * The Amazon Resource Name (ARN) of the Outpost.
         */
        var outpostArn: kotlin.String? = null
        /**
         * Reports impaired functionality that stems from issues related to the systems that
         * support an instance, such as hardware failures and network connectivity problems.
         */
        var systemStatus: aws.sdk.kotlin.services.ec2.model.InstanceStatusSummary? = null

        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.InstanceStatus) : this() {
            this.availabilityZone = x.availabilityZone
            this.events = x.events
            this.instanceId = x.instanceId
            this.instanceState = x.instanceState
            this.instanceStatus = x.instanceStatus
            this.outpostArn = x.outpostArn
            this.systemStatus = x.systemStatus
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.InstanceStatus = InstanceStatus(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.InstanceState] inside the given [block]
         */
        fun instanceState(block: aws.sdk.kotlin.services.ec2.model.InstanceState.Builder.() -> kotlin.Unit) {
            this.instanceState = aws.sdk.kotlin.services.ec2.model.InstanceState.invoke(block)
        }

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.InstanceStatusSummary] inside the given [block]
         */
        fun instanceStatus(block: aws.sdk.kotlin.services.ec2.model.InstanceStatusSummary.Builder.() -> kotlin.Unit) {
            this.instanceStatus = aws.sdk.kotlin.services.ec2.model.InstanceStatusSummary.invoke(block)
        }

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.InstanceStatusSummary] inside the given [block]
         */
        fun systemStatus(block: aws.sdk.kotlin.services.ec2.model.InstanceStatusSummary.Builder.() -> kotlin.Unit) {
            this.systemStatus = aws.sdk.kotlin.services.ec2.model.InstanceStatusSummary.invoke(block)
        }
    }
}
