// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the Classic Load Balancers to attach to a Spot Fleet. Spot Fleet registers
 * the running Spot Instances with these Classic Load Balancers.
 */
class ClassicLoadBalancersConfig private constructor(builder: Builder) {
    /**
     * One or more Classic Load Balancers.
     */
    val classicLoadBalancers: List<ClassicLoadBalancer>? = builder.classicLoadBalancers

    companion object {
        operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.ClassicLoadBalancersConfig = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("ClassicLoadBalancersConfig(")
        append("classicLoadBalancers=$classicLoadBalancers)")
    }

    override fun hashCode(): kotlin.Int {
        var result = classicLoadBalancers?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as ClassicLoadBalancersConfig

        if (classicLoadBalancers != other.classicLoadBalancers) return false

        return true
    }

    inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.ClassicLoadBalancersConfig = Builder(this).apply(block).build()

    class Builder {
        /**
         * One or more Classic Load Balancers.
         */
        var classicLoadBalancers: List<ClassicLoadBalancer>? = null

        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.ClassicLoadBalancersConfig) : this() {
            this.classicLoadBalancers = x.classicLoadBalancers
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.ClassicLoadBalancersConfig = ClassicLoadBalancersConfig(this)
    }
}
