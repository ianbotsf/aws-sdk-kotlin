// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ReplaceTransitGatewayRouteRequest private constructor(builder: Builder) {
    /**
     * Indicates whether traffic matching this route is to be dropped.
     */
    val blackhole: kotlin.Boolean? = builder.blackhole
    /**
     * The CIDR range used for the destination match. Routing decisions are based on the most specific match.
     */
    val destinationCidrBlock: kotlin.String? = builder.destinationCidrBlock
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: kotlin.Boolean? = builder.dryRun
    /**
     * The ID of the attachment.
     */
    val transitGatewayAttachmentId: kotlin.String? = builder.transitGatewayAttachmentId
    /**
     * The ID of the route table.
     */
    val transitGatewayRouteTableId: kotlin.String? = builder.transitGatewayRouteTableId

    companion object {
        operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.ReplaceTransitGatewayRouteRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("ReplaceTransitGatewayRouteRequest(")
        append("blackhole=$blackhole,")
        append("destinationCidrBlock=$destinationCidrBlock,")
        append("dryRun=$dryRun,")
        append("transitGatewayAttachmentId=$transitGatewayAttachmentId,")
        append("transitGatewayRouteTableId=$transitGatewayRouteTableId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = blackhole?.hashCode() ?: 0
        result = 31 * result + (destinationCidrBlock?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (transitGatewayAttachmentId?.hashCode() ?: 0)
        result = 31 * result + (transitGatewayRouteTableId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as ReplaceTransitGatewayRouteRequest

        if (blackhole != other.blackhole) return false
        if (destinationCidrBlock != other.destinationCidrBlock) return false
        if (dryRun != other.dryRun) return false
        if (transitGatewayAttachmentId != other.transitGatewayAttachmentId) return false
        if (transitGatewayRouteTableId != other.transitGatewayRouteTableId) return false

        return true
    }

    inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.ReplaceTransitGatewayRouteRequest = Builder(this).apply(block).build()

    class Builder {
        /**
         * Indicates whether traffic matching this route is to be dropped.
         */
        var blackhole: kotlin.Boolean? = null
        /**
         * The CIDR range used for the destination match. Routing decisions are based on the most specific match.
         */
        var destinationCidrBlock: kotlin.String? = null
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: kotlin.Boolean? = null
        /**
         * The ID of the attachment.
         */
        var transitGatewayAttachmentId: kotlin.String? = null
        /**
         * The ID of the route table.
         */
        var transitGatewayRouteTableId: kotlin.String? = null

        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.ReplaceTransitGatewayRouteRequest) : this() {
            this.blackhole = x.blackhole
            this.destinationCidrBlock = x.destinationCidrBlock
            this.dryRun = x.dryRun
            this.transitGatewayAttachmentId = x.transitGatewayAttachmentId
            this.transitGatewayRouteTableId = x.transitGatewayRouteTableId
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.ReplaceTransitGatewayRouteRequest = ReplaceTransitGatewayRouteRequest(this)
    }
}
