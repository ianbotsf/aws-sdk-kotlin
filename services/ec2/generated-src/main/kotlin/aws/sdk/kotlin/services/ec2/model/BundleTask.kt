// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model

import aws.smithy.kotlin.runtime.time.Instant

/**
 * Describes a bundle task.
 */
class BundleTask private constructor(builder: Builder) {
    /**
     * The ID of the bundle task.
     */
    val bundleId: kotlin.String? = builder.bundleId
    /**
     * If the task fails, a description of the error.
     */
    val bundleTaskError: aws.sdk.kotlin.services.ec2.model.BundleTaskError? = builder.bundleTaskError
    /**
     * The ID of the instance associated with this bundle task.
     */
    val instanceId: kotlin.String? = builder.instanceId
    /**
     * The level of task completion, as a percent (for example, 20%).
     */
    val progress: kotlin.String? = builder.progress
    /**
     * The time this task started.
     */
    val startTime: aws.smithy.kotlin.runtime.time.Instant? = builder.startTime
    /**
     * The state of the task.
     */
    val state: aws.sdk.kotlin.services.ec2.model.BundleTaskState? = builder.state
    /**
     * The Amazon S3 storage locations.
     */
    val storage: aws.sdk.kotlin.services.ec2.model.Storage? = builder.storage
    /**
     * The time of the most recent update for the task.
     */
    val updateTime: aws.smithy.kotlin.runtime.time.Instant? = builder.updateTime

    companion object {
        operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.BundleTask = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("BundleTask(")
        append("bundleId=$bundleId,")
        append("bundleTaskError=$bundleTaskError,")
        append("instanceId=$instanceId,")
        append("progress=$progress,")
        append("startTime=$startTime,")
        append("state=$state,")
        append("storage=$storage,")
        append("updateTime=$updateTime)")
    }

    override fun hashCode(): kotlin.Int {
        var result = bundleId?.hashCode() ?: 0
        result = 31 * result + (bundleTaskError?.hashCode() ?: 0)
        result = 31 * result + (instanceId?.hashCode() ?: 0)
        result = 31 * result + (progress?.hashCode() ?: 0)
        result = 31 * result + (startTime?.hashCode() ?: 0)
        result = 31 * result + (state?.hashCode() ?: 0)
        result = 31 * result + (storage?.hashCode() ?: 0)
        result = 31 * result + (updateTime?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as BundleTask

        if (bundleId != other.bundleId) return false
        if (bundleTaskError != other.bundleTaskError) return false
        if (instanceId != other.instanceId) return false
        if (progress != other.progress) return false
        if (startTime != other.startTime) return false
        if (state != other.state) return false
        if (storage != other.storage) return false
        if (updateTime != other.updateTime) return false

        return true
    }

    inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.BundleTask = Builder(this).apply(block).build()

    class Builder {
        /**
         * The ID of the bundle task.
         */
        var bundleId: kotlin.String? = null
        /**
         * If the task fails, a description of the error.
         */
        var bundleTaskError: aws.sdk.kotlin.services.ec2.model.BundleTaskError? = null
        /**
         * The ID of the instance associated with this bundle task.
         */
        var instanceId: kotlin.String? = null
        /**
         * The level of task completion, as a percent (for example, 20%).
         */
        var progress: kotlin.String? = null
        /**
         * The time this task started.
         */
        var startTime: aws.smithy.kotlin.runtime.time.Instant? = null
        /**
         * The state of the task.
         */
        var state: aws.sdk.kotlin.services.ec2.model.BundleTaskState? = null
        /**
         * The Amazon S3 storage locations.
         */
        var storage: aws.sdk.kotlin.services.ec2.model.Storage? = null
        /**
         * The time of the most recent update for the task.
         */
        var updateTime: aws.smithy.kotlin.runtime.time.Instant? = null

        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.BundleTask) : this() {
            this.bundleId = x.bundleId
            this.bundleTaskError = x.bundleTaskError
            this.instanceId = x.instanceId
            this.progress = x.progress
            this.startTime = x.startTime
            this.state = x.state
            this.storage = x.storage
            this.updateTime = x.updateTime
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.BundleTask = BundleTask(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.BundleTaskError] inside the given [block]
         */
        fun bundleTaskError(block: aws.sdk.kotlin.services.ec2.model.BundleTaskError.Builder.() -> kotlin.Unit) {
            this.bundleTaskError = aws.sdk.kotlin.services.ec2.model.BundleTaskError.invoke(block)
        }

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.Storage] inside the given [block]
         */
        fun storage(block: aws.sdk.kotlin.services.ec2.model.Storage.Builder.() -> kotlin.Unit) {
            this.storage = aws.sdk.kotlin.services.ec2.model.Storage.invoke(block)
        }
    }
}
