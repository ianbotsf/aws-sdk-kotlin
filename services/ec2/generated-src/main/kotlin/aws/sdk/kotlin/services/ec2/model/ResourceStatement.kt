// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a resource statement.
 */
class ResourceStatement private constructor(builder: Builder) {
    /**
     * The resource types.
     */
    val resourceTypes: List<String>? = builder.resourceTypes
    /**
     * The resources.
     */
    val resources: List<String>? = builder.resources

    companion object {
        operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.ResourceStatement = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("ResourceStatement(")
        append("resourceTypes=$resourceTypes,")
        append("resources=$resources)")
    }

    override fun hashCode(): kotlin.Int {
        var result = resourceTypes?.hashCode() ?: 0
        result = 31 * result + (resources?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as ResourceStatement

        if (resourceTypes != other.resourceTypes) return false
        if (resources != other.resources) return false

        return true
    }

    inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.ResourceStatement = Builder(this).apply(block).build()

    class Builder {
        /**
         * The resource types.
         */
        var resourceTypes: List<String>? = null
        /**
         * The resources.
         */
        var resources: List<String>? = null

        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.ResourceStatement) : this() {
            this.resourceTypes = x.resourceTypes
            this.resources = x.resources
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.ResourceStatement = ResourceStatement(this)
    }
}
