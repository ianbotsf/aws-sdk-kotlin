// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



class ModifyFleetRequest private constructor(builder: Builder) {
    /**
     * Reserved.
     */
    val context: kotlin.String? = builder.context
    /**
     * Checks whether you have the required permissions for the action, without actually making the request,
     * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
     * Otherwise, it is UnauthorizedOperation.
     */
    val dryRun: kotlin.Boolean? = builder.dryRun
    /**
     * Indicates whether running instances should be terminated if the total target capacity of
     * the EC2 Fleet is decreased below the current size of the EC2 Fleet.
     */
    val excessCapacityTerminationPolicy: aws.sdk.kotlin.services.ec2.model.FleetExcessCapacityTerminationPolicy? = builder.excessCapacityTerminationPolicy
    /**
     * The ID of the EC2 Fleet.
     */
    val fleetId: kotlin.String? = builder.fleetId
    /**
     * The launch template and overrides.
     */
    val launchTemplateConfigs: List<FleetLaunchTemplateConfigRequest>? = builder.launchTemplateConfigs
    /**
     * The size of the EC2 Fleet.
     */
    val targetCapacitySpecification: aws.sdk.kotlin.services.ec2.model.TargetCapacitySpecificationRequest? = builder.targetCapacitySpecification

    companion object {
        operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.ModifyFleetRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyFleetRequest(")
        append("context=$context,")
        append("dryRun=$dryRun,")
        append("excessCapacityTerminationPolicy=$excessCapacityTerminationPolicy,")
        append("fleetId=$fleetId,")
        append("launchTemplateConfigs=$launchTemplateConfigs,")
        append("targetCapacitySpecification=$targetCapacitySpecification)")
    }

    override fun hashCode(): kotlin.Int {
        var result = context?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (excessCapacityTerminationPolicy?.hashCode() ?: 0)
        result = 31 * result + (fleetId?.hashCode() ?: 0)
        result = 31 * result + (launchTemplateConfigs?.hashCode() ?: 0)
        result = 31 * result + (targetCapacitySpecification?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as ModifyFleetRequest

        if (context != other.context) return false
        if (dryRun != other.dryRun) return false
        if (excessCapacityTerminationPolicy != other.excessCapacityTerminationPolicy) return false
        if (fleetId != other.fleetId) return false
        if (launchTemplateConfigs != other.launchTemplateConfigs) return false
        if (targetCapacitySpecification != other.targetCapacitySpecification) return false

        return true
    }

    inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.ModifyFleetRequest = Builder(this).apply(block).build()

    class Builder {
        /**
         * Reserved.
         */
        var context: kotlin.String? = null
        /**
         * Checks whether you have the required permissions for the action, without actually making the request,
         * and provides an error response. If you have the required permissions, the error response is DryRunOperation.
         * Otherwise, it is UnauthorizedOperation.
         */
        var dryRun: kotlin.Boolean? = null
        /**
         * Indicates whether running instances should be terminated if the total target capacity of
         * the EC2 Fleet is decreased below the current size of the EC2 Fleet.
         */
        var excessCapacityTerminationPolicy: aws.sdk.kotlin.services.ec2.model.FleetExcessCapacityTerminationPolicy? = null
        /**
         * The ID of the EC2 Fleet.
         */
        var fleetId: kotlin.String? = null
        /**
         * The launch template and overrides.
         */
        var launchTemplateConfigs: List<FleetLaunchTemplateConfigRequest>? = null
        /**
         * The size of the EC2 Fleet.
         */
        var targetCapacitySpecification: aws.sdk.kotlin.services.ec2.model.TargetCapacitySpecificationRequest? = null

        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.ModifyFleetRequest) : this() {
            this.context = x.context
            this.dryRun = x.dryRun
            this.excessCapacityTerminationPolicy = x.excessCapacityTerminationPolicy
            this.fleetId = x.fleetId
            this.launchTemplateConfigs = x.launchTemplateConfigs
            this.targetCapacitySpecification = x.targetCapacitySpecification
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.ModifyFleetRequest = ModifyFleetRequest(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.TargetCapacitySpecificationRequest] inside the given [block]
         */
        fun targetCapacitySpecification(block: aws.sdk.kotlin.services.ec2.model.TargetCapacitySpecificationRequest.Builder.() -> kotlin.Unit) {
            this.targetCapacitySpecification = aws.sdk.kotlin.services.ec2.model.TargetCapacitySpecificationRequest.invoke(block)
        }
    }
}
