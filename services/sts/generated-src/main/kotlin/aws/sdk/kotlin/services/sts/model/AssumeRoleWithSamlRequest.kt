// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.sts.model



class AssumeRoleWithSamlRequest private constructor(builder: Builder) {
    /**
     * The duration, in seconds, of the role session. Your role session lasts for the duration
     * that you specify for the DurationSeconds parameter, or until the time
     * specified in the SAML authentication response's SessionNotOnOrAfter value,
     * whichever is shorter. You can provide a DurationSeconds value from 900 seconds
     * (15 minutes) up to the maximum session duration setting for the role. This setting can have
     * a value from 1 hour to 12 hours. If you specify a value higher than this setting, the
     * operation fails. For example, if you specify a session duration of 12 hours, but your
     * administrator set the maximum session duration to 6 hours, your operation fails. To learn
     * how to view the maximum value for your role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session">View the
     * Maximum Session Duration Setting for a Role in the
     * IAM User Guide.
     * By default, the value is set to 3600 seconds.
     *
     * The DurationSeconds parameter is separate from the duration of a console
     * session that you might request using the returned credentials. The request to the
     * federation endpoint for a console sign-in token takes a SessionDuration
     * parameter that specifies the maximum length of the console session. For more
     * information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html">Creating a URL
     * that Enables Federated Users to Access the Amazon Web Services Management Console in the
     * IAM User Guide.
     */
    val durationSeconds: kotlin.Int? = builder.durationSeconds
    /**
     * An IAM policy in JSON format that you want to use as an inline session policy.
     * This parameter is optional. Passing policies to this operation returns new
     * temporary credentials. The resulting session's permissions are the intersection of the
     * role's identity-based policy and the session policies. You can use the role's temporary
     * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
     * the role. You cannot use session policies to grant more permissions than those allowed
     * by the identity-based policy of the role that is being assumed. For more information, see
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
     * Policies in the IAM User Guide.
     * The plaintext that you use for both inline and managed session policies can't exceed
     * 2,048 characters. The JSON policy characters can be any ASCII character from the space
     * character to the end of the valid character list (\u0020 through \u00FF). It can also
     * include the tab (\u0009), linefeed (\u000A), and carriage return (\u000D)
     * characters.
     *
     *
     * An Amazon Web Services conversion compresses the passed session policies and session tags into a
     * packed binary format that has a separate limit. Your request can fail for this limit
     * even if your plaintext meets the other requirements. The PackedPolicySize
     * response element indicates by percentage how close the policies and tags for your
     * request are to the upper size limit.
     */
    val policy: kotlin.String? = builder.policy
    /**
     * The Amazon Resource Names (ARNs) of the IAM managed policies that you want to use as
     * managed session policies. The policies must exist in the same account as the role.
     * This parameter is optional. You can provide up to 10 managed policy ARNs. However, the
     * plaintext that you use for both inline and managed session policies can't exceed 2,048
     * characters. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services
     * Service Namespaces in the Amazon Web Services General Reference.
     *
     *
     * An Amazon Web Services conversion compresses the passed session policies and session tags into a
     * packed binary format that has a separate limit. Your request can fail for this limit
     * even if your plaintext meets the other requirements. The PackedPolicySize
     * response element indicates by percentage how close the policies and tags for your
     * request are to the upper size limit.
     *
     *
     *
     * Passing policies to this operation returns new
     * temporary credentials. The resulting session's permissions are the intersection of the
     * role's identity-based policy and the session policies. You can use the role's temporary
     * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
     * the role. You cannot use session policies to grant more permissions than those allowed
     * by the identity-based policy of the role that is being assumed. For more information, see
     * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
     * Policies in the IAM User Guide.
     */
    val policyArns: List<PolicyDescriptorType>? = builder.policyArns
    /**
     * The Amazon Resource Name (ARN) of the SAML provider in IAM that describes the
     * IdP.
     */
    val principalArn: kotlin.String? = builder.principalArn
    /**
     * The Amazon Resource Name (ARN) of the role that the caller is assuming.
     */
    val roleArn: kotlin.String? = builder.roleArn
    /**
     * The base64 encoded SAML authentication response provided by the IdP.
     * For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/create-role-saml-IdP-tasks.html">Configuring a Relying Party and
     * Adding Claims in the IAM User Guide.
     */
    val samlAssertion: kotlin.String? = builder.samlAssertion

    companion object {
        operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.sts.model.AssumeRoleWithSamlRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("AssumeRoleWithSamlRequest(")
        append("durationSeconds=$durationSeconds,")
        append("policy=$policy,")
        append("policyArns=$policyArns,")
        append("principalArn=$principalArn,")
        append("roleArn=$roleArn,")
        append("samlAssertion=$samlAssertion)")
    }

    override fun hashCode(): kotlin.Int {
        var result = durationSeconds ?: 0
        result = 31 * result + (policy?.hashCode() ?: 0)
        result = 31 * result + (policyArns?.hashCode() ?: 0)
        result = 31 * result + (principalArn?.hashCode() ?: 0)
        result = 31 * result + (roleArn?.hashCode() ?: 0)
        result = 31 * result + (samlAssertion?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as AssumeRoleWithSamlRequest

        if (durationSeconds != other.durationSeconds) return false
        if (policy != other.policy) return false
        if (policyArns != other.policyArns) return false
        if (principalArn != other.principalArn) return false
        if (roleArn != other.roleArn) return false
        if (samlAssertion != other.samlAssertion) return false

        return true
    }

    inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.sts.model.AssumeRoleWithSamlRequest = Builder(this).apply(block).build()

    class Builder {
        /**
         * The duration, in seconds, of the role session. Your role session lasts for the duration
         * that you specify for the DurationSeconds parameter, or until the time
         * specified in the SAML authentication response's SessionNotOnOrAfter value,
         * whichever is shorter. You can provide a DurationSeconds value from 900 seconds
         * (15 minutes) up to the maximum session duration setting for the role. This setting can have
         * a value from 1 hour to 12 hours. If you specify a value higher than this setting, the
         * operation fails. For example, if you specify a session duration of 12 hours, but your
         * administrator set the maximum session duration to 6 hours, your operation fails. To learn
         * how to view the maximum value for your role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session">View the
         * Maximum Session Duration Setting for a Role in the
         * IAM User Guide.
         * By default, the value is set to 3600 seconds.
         *
         * The DurationSeconds parameter is separate from the duration of a console
         * session that you might request using the returned credentials. The request to the
         * federation endpoint for a console sign-in token takes a SessionDuration
         * parameter that specifies the maximum length of the console session. For more
         * information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html">Creating a URL
         * that Enables Federated Users to Access the Amazon Web Services Management Console in the
         * IAM User Guide.
         */
        var durationSeconds: kotlin.Int? = null
        /**
         * An IAM policy in JSON format that you want to use as an inline session policy.
         * This parameter is optional. Passing policies to this operation returns new
         * temporary credentials. The resulting session's permissions are the intersection of the
         * role's identity-based policy and the session policies. You can use the role's temporary
         * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
         * the role. You cannot use session policies to grant more permissions than those allowed
         * by the identity-based policy of the role that is being assumed. For more information, see
         * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
         * Policies in the IAM User Guide.
         * The plaintext that you use for both inline and managed session policies can't exceed
         * 2,048 characters. The JSON policy characters can be any ASCII character from the space
         * character to the end of the valid character list (\u0020 through \u00FF). It can also
         * include the tab (\u0009), linefeed (\u000A), and carriage return (\u000D)
         * characters.
         *
         *
         * An Amazon Web Services conversion compresses the passed session policies and session tags into a
         * packed binary format that has a separate limit. Your request can fail for this limit
         * even if your plaintext meets the other requirements. The PackedPolicySize
         * response element indicates by percentage how close the policies and tags for your
         * request are to the upper size limit.
         */
        var policy: kotlin.String? = null
        /**
         * The Amazon Resource Names (ARNs) of the IAM managed policies that you want to use as
         * managed session policies. The policies must exist in the same account as the role.
         * This parameter is optional. You can provide up to 10 managed policy ARNs. However, the
         * plaintext that you use for both inline and managed session policies can't exceed 2,048
         * characters. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services
         * Service Namespaces in the Amazon Web Services General Reference.
         *
         *
         * An Amazon Web Services conversion compresses the passed session policies and session tags into a
         * packed binary format that has a separate limit. Your request can fail for this limit
         * even if your plaintext meets the other requirements. The PackedPolicySize
         * response element indicates by percentage how close the policies and tags for your
         * request are to the upper size limit.
         *
         *
         *
         * Passing policies to this operation returns new
         * temporary credentials. The resulting session's permissions are the intersection of the
         * role's identity-based policy and the session policies. You can use the role's temporary
         * credentials in subsequent Amazon Web Services API calls to access resources in the account that owns
         * the role. You cannot use session policies to grant more permissions than those allowed
         * by the identity-based policy of the role that is being assumed. For more information, see
         * <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session">Session
         * Policies in the IAM User Guide.
         */
        var policyArns: List<PolicyDescriptorType>? = null
        /**
         * The Amazon Resource Name (ARN) of the SAML provider in IAM that describes the
         * IdP.
         */
        var principalArn: kotlin.String? = null
        /**
         * The Amazon Resource Name (ARN) of the role that the caller is assuming.
         */
        var roleArn: kotlin.String? = null
        /**
         * The base64 encoded SAML authentication response provided by the IdP.
         * For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/create-role-saml-IdP-tasks.html">Configuring a Relying Party and
         * Adding Claims in the IAM User Guide.
         */
        var samlAssertion: kotlin.String? = null

        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.sts.model.AssumeRoleWithSamlRequest) : this() {
            this.durationSeconds = x.durationSeconds
            this.policy = x.policy
            this.policyArns = x.policyArns
            this.principalArn = x.principalArn
            this.roleArn = x.roleArn
            this.samlAssertion = x.samlAssertion
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.sts.model.AssumeRoleWithSamlRequest = AssumeRoleWithSamlRequest(this)
    }
}
