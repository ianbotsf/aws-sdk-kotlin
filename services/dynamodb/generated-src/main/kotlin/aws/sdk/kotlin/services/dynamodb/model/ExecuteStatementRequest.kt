// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



class ExecuteStatementRequest private constructor(builder: Builder) {
    /**
     * The consistency of a read operation. If set to true, then a strongly
     * consistent read is used; otherwise, an eventually consistent read is used.
     */
    val consistentRead: kotlin.Boolean? = builder.consistentRead
    /**
     * Set this value to get remaining results, if NextToken was returned in the
     * statement response.
     */
    val nextToken: kotlin.String? = builder.nextToken
    /**
     * The parameters for the PartiQL statement, if any.
     */
    val parameters: List<AttributeValue>? = builder.parameters
    /**
     * Determines the level of detail about either provisioned or on-demand throughput
     * consumption that is returned in the response:
     *
     *
     *
     * INDEXES - The response includes the aggregate
     * ConsumedCapacity for the operation, together with
     * ConsumedCapacity for each table and secondary index that was
     * accessed.
     * Note that some operations, such as GetItem and
     * BatchGetItem, do not access any indexes at all. In these cases,
     * specifying INDEXES will only return ConsumedCapacity
     * information for table(s).
     *
     *
     * TOTAL - The response includes only the aggregate
     * ConsumedCapacity for the operation.
     *
     *
     * NONE - No ConsumedCapacity details are included in the
     * response.
     */
    val returnConsumedCapacity: aws.sdk.kotlin.services.dynamodb.model.ReturnConsumedCapacity? = builder.returnConsumedCapacity
    /**
     * The PartiQL statement representing the operation to run.
     */
    val statement: kotlin.String? = builder.statement

    companion object {
        operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.dynamodb.model.ExecuteStatementRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("ExecuteStatementRequest(")
        append("consistentRead=$consistentRead,")
        append("nextToken=$nextToken,")
        append("parameters=$parameters,")
        append("returnConsumedCapacity=$returnConsumedCapacity,")
        append("statement=$statement)")
    }

    override fun hashCode(): kotlin.Int {
        var result = consistentRead?.hashCode() ?: 0
        result = 31 * result + (nextToken?.hashCode() ?: 0)
        result = 31 * result + (parameters?.hashCode() ?: 0)
        result = 31 * result + (returnConsumedCapacity?.hashCode() ?: 0)
        result = 31 * result + (statement?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as ExecuteStatementRequest

        if (consistentRead != other.consistentRead) return false
        if (nextToken != other.nextToken) return false
        if (parameters != other.parameters) return false
        if (returnConsumedCapacity != other.returnConsumedCapacity) return false
        if (statement != other.statement) return false

        return true
    }

    inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.dynamodb.model.ExecuteStatementRequest = Builder(this).apply(block).build()

    class Builder {
        /**
         * The consistency of a read operation. If set to true, then a strongly
         * consistent read is used; otherwise, an eventually consistent read is used.
         */
        var consistentRead: kotlin.Boolean? = null
        /**
         * Set this value to get remaining results, if NextToken was returned in the
         * statement response.
         */
        var nextToken: kotlin.String? = null
        /**
         * The parameters for the PartiQL statement, if any.
         */
        var parameters: List<AttributeValue>? = null
        /**
         * Determines the level of detail about either provisioned or on-demand throughput
         * consumption that is returned in the response:
         *
         *
         *
         * INDEXES - The response includes the aggregate
         * ConsumedCapacity for the operation, together with
         * ConsumedCapacity for each table and secondary index that was
         * accessed.
         * Note that some operations, such as GetItem and
         * BatchGetItem, do not access any indexes at all. In these cases,
         * specifying INDEXES will only return ConsumedCapacity
         * information for table(s).
         *
         *
         * TOTAL - The response includes only the aggregate
         * ConsumedCapacity for the operation.
         *
         *
         * NONE - No ConsumedCapacity details are included in the
         * response.
         */
        var returnConsumedCapacity: aws.sdk.kotlin.services.dynamodb.model.ReturnConsumedCapacity? = null
        /**
         * The PartiQL statement representing the operation to run.
         */
        var statement: kotlin.String? = null

        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.dynamodb.model.ExecuteStatementRequest) : this() {
            this.consistentRead = x.consistentRead
            this.nextToken = x.nextToken
            this.parameters = x.parameters
            this.returnConsumedCapacity = x.returnConsumedCapacity
            this.statement = x.statement
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.dynamodb.model.ExecuteStatementRequest = ExecuteStatementRequest(this)
    }
}
