// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.model



class ExecuteStatementResponse private constructor(builder: Builder) {
    /**
     * The capacity units consumed by an operation. The data returned includes the total
     * provisioned throughput consumed, along with statistics for the table and any indexes
     * involved in the operation. ConsumedCapacity is only returned if the request
     * asked for it. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned Throughput in the Amazon DynamoDB Developer
     * Guide.
     */
    val consumedCapacity: aws.sdk.kotlin.services.dynamodb.model.ConsumedCapacity? = builder.consumedCapacity
    /**
     * If a read operation was used, this property will contain the result of the read
     * operation; a map of attribute names and their values. For the write operations this
     * value will be empty.
     */
    val items: List<Map<String, AttributeValue>>? = builder.items
    /**
     * If the response of a read request exceeds the response payload limit DynamoDB will set
     * this value in the response. If set, you can use that this value in the subsequent
     * request to get the remaining results.
     */
    val nextToken: kotlin.String? = builder.nextToken

    companion object {
        operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.dynamodb.model.ExecuteStatementResponse = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("ExecuteStatementResponse(")
        append("consumedCapacity=$consumedCapacity,")
        append("items=$items,")
        append("nextToken=$nextToken)")
    }

    override fun hashCode(): kotlin.Int {
        var result = consumedCapacity?.hashCode() ?: 0
        result = 31 * result + (items?.hashCode() ?: 0)
        result = 31 * result + (nextToken?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as ExecuteStatementResponse

        if (consumedCapacity != other.consumedCapacity) return false
        if (items != other.items) return false
        if (nextToken != other.nextToken) return false

        return true
    }

    inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.dynamodb.model.ExecuteStatementResponse = Builder(this).apply(block).build()

    class Builder {
        /**
         * The capacity units consumed by an operation. The data returned includes the total
         * provisioned throughput consumed, along with statistics for the table and any indexes
         * involved in the operation. ConsumedCapacity is only returned if the request
         * asked for it. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned Throughput in the Amazon DynamoDB Developer
         * Guide.
         */
        var consumedCapacity: aws.sdk.kotlin.services.dynamodb.model.ConsumedCapacity? = null
        /**
         * If a read operation was used, this property will contain the result of the read
         * operation; a map of attribute names and their values. For the write operations this
         * value will be empty.
         */
        var items: List<Map<String, AttributeValue>>? = null
        /**
         * If the response of a read request exceeds the response payload limit DynamoDB will set
         * this value in the response. If set, you can use that this value in the subsequent
         * request to get the remaining results.
         */
        var nextToken: kotlin.String? = null

        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.dynamodb.model.ExecuteStatementResponse) : this() {
            this.consumedCapacity = x.consumedCapacity
            this.items = x.items
            this.nextToken = x.nextToken
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.dynamodb.model.ExecuteStatementResponse = ExecuteStatementResponse(this)

        /**
         * construct an [aws.sdk.kotlin.services.dynamodb.model.ConsumedCapacity] inside the given [block]
         */
        fun consumedCapacity(block: aws.sdk.kotlin.services.dynamodb.model.ConsumedCapacity.Builder.() -> kotlin.Unit) {
            this.consumedCapacity = aws.sdk.kotlin.services.dynamodb.model.ConsumedCapacity.invoke(block)
        }
    }
}
