// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.polly

import aws.sdk.kotlin.runtime.auth.credentials.CredentialsProvider
import aws.sdk.kotlin.runtime.auth.credentials.DefaultChainCredentialsProvider
import aws.sdk.kotlin.runtime.auth.credentials.internal.borrow
import aws.sdk.kotlin.runtime.endpoint.AwsEndpointResolver
import aws.sdk.kotlin.runtime.region.resolveRegion
import aws.sdk.kotlin.services.polly.internal.DefaultEndpointResolver
import aws.sdk.kotlin.services.polly.model.*
import aws.smithy.kotlin.runtime.SdkClient
import aws.smithy.kotlin.runtime.client.SdkLogMode
import aws.smithy.kotlin.runtime.config.SdkClientConfig
import aws.smithy.kotlin.runtime.http.config.HttpClientConfig
import aws.smithy.kotlin.runtime.http.engine.HttpClientEngine
import aws.smithy.kotlin.runtime.http.operation.EndpointResolver
import aws.smithy.kotlin.runtime.retries.RetryStrategy
import aws.smithy.kotlin.runtime.retries.StandardRetryStrategy
import aws.smithy.kotlin.runtime.retries.StandardRetryStrategyOptions
import aws.smithy.kotlin.runtime.retries.delay.ExponentialBackoffWithJitter
import aws.smithy.kotlin.runtime.retries.delay.ExponentialBackoffWithJitterOptions
import aws.smithy.kotlin.runtime.retries.delay.StandardRetryTokenBucket
import aws.smithy.kotlin.runtime.retries.delay.StandardRetryTokenBucketOptions

/**
 * Amazon Polly is a web service that makes it easy to synthesize speech from
 * text.
 * The Amazon Polly service provides API operations for synthesizing
 * high-quality speech from plain text and Speech Synthesis Markup Language
 * (SSML), along with managing pronunciations lexicons that enable you to get
 * the best results for your application domain.
 */
interface PollyClient : SdkClient {

    override val serviceName: String
        get() = "Polly"
    /**
     * PollyClient's configuration
     */
    val config: Config

    companion object {
        operator fun invoke(block: Config.Builder.() -> Unit): PollyClient {
            val config = Config.Builder().apply(block).build()
            return DefaultPollyClient(config)
        }

        operator fun invoke(config: Config): PollyClient = DefaultPollyClient(config)

        /**
         * Construct a [PollyClient] by resolving the configuration from the current environment.
         */
        suspend fun fromEnvironment(block: (Config.Builder.() -> Unit)? = null): PollyClient {
            val builder = Config.Builder()
            if (block != null) builder.apply(block)
            builder.region = builder.region ?: resolveRegion()
            return DefaultPollyClient(builder.build())
        }
    }

    class Config private constructor(builder: Builder): HttpClientConfig, SdkClientConfig {
        val credentialsProvider: CredentialsProvider = builder.credentialsProvider?.borrow() ?: DefaultChainCredentialsProvider()
        val endpointResolver: AwsEndpointResolver = builder.endpointResolver ?: DefaultEndpointResolver()
        override val httpClientEngine: HttpClientEngine? = builder.httpClientEngine
        val region: String = requireNotNull(builder.region) { "region is a required configuration property" }
        val retryStrategy: RetryStrategy = run {
            val strategyOptions = StandardRetryStrategyOptions.Default
            val tokenBucket = StandardRetryTokenBucket(StandardRetryTokenBucketOptions.Default)
            val delayer = ExponentialBackoffWithJitter(ExponentialBackoffWithJitterOptions.Default)
            StandardRetryStrategy(strategyOptions, tokenBucket, delayer)
        }
        override val sdkLogMode: SdkLogMode = builder.sdkLogMode
        companion object {
            inline operator fun invoke(block: Builder.() -> kotlin.Unit): Config = Builder().apply(block).build()
        }

        class Builder {
            /**
             * The AWS credentials provider to use for authenticating requests. If not provided a
             * [aws.sdk.kotlin.runtime.auth.credentials.DefaultChainCredentialsProvider] instance will be used.
             * NOTE: The caller is responsible for managing the lifetime of the provider when set. The SDK
             * client will not close it when the client is closed.
             */
            var credentialsProvider: CredentialsProvider? = null
            /**
             * Determines the endpoint (hostname) to make requests to. When not provided a default
             * resolver is configured automatically. This is an advanced client option.
             */
            var endpointResolver: AwsEndpointResolver? = null
            /**
             * Override the default HTTP client engine used to make SDK requests (e.g. configure proxy behavior, timeouts, concurrency, etc).
             * NOTE: The caller is responsible for managing the lifetime of the engine when set. The SDK
             * client will not close it when the client is closed.
             */
            var httpClientEngine: HttpClientEngine? = null
            /**
             * AWS region to make requests to
             */
            var region: String? = null
            /**
             * Configure events that will be logged. By default clients will not output
             * raw requests or responses. Use this setting to opt-in to additional debug logging.
             *
             * This can be used to configure logging of requests, responses, retries, etc of SDK clients.
             *
             * **NOTE**: Logging of raw requests or responses may leak sensitive information! It may also have
             * performance considerations when dumping the request/response body. This is primarily a tool for
             * debug purposes.
             */
            var sdkLogMode: SdkLogMode = SdkLogMode.Default

            @PublishedApi
            internal fun build(): Config = Config(this)
        }
    }

    /**
     * Deletes the specified pronunciation lexicon stored in an Amazon Web Services Region. A lexicon which has been deleted is not available for
     * speech synthesis, nor is it possible to retrieve it using either the
     * GetLexicon or ListLexicon APIs.
     * For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons.
     */
    suspend fun deleteLexicon(input: DeleteLexiconRequest): DeleteLexiconResponse

    /**
     * Deletes the specified pronunciation lexicon stored in an Amazon Web Services Region. A lexicon which has been deleted is not available for
     * speech synthesis, nor is it possible to retrieve it using either the
     * GetLexicon or ListLexicon APIs.
     * For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons.
     */
    suspend fun deleteLexicon(block: DeleteLexiconRequest.Builder.() -> Unit) = deleteLexicon(DeleteLexiconRequest.Builder().apply(block).build())

    /**
     * Returns the list of voices that are available for use when
     * requesting speech synthesis. Each voice speaks a specified language, is
     * either male or female, and is identified by an ID, which is the ASCII
     * version of the voice name.
     *
     * When synthesizing speech ( SynthesizeSpeech ), you
     * provide the voice ID for the voice you want from the list of voices
     * returned by DescribeVoices.
     *
     * For example, you want your news reader application to read news in
     * a specific language, but giving a user the option to choose the voice.
     * Using the DescribeVoices operation you can provide the user
     * with a list of available voices to select from.
     *
     * You can optionally specify a language code to filter the available
     * voices. For example, if you specify en-US, the operation
     * returns a list of all available US English voices.
     * This operation requires permissions to perform the
     * polly:DescribeVoices action.
     */
    suspend fun describeVoices(input: DescribeVoicesRequest): DescribeVoicesResponse

    /**
     * Returns the list of voices that are available for use when
     * requesting speech synthesis. Each voice speaks a specified language, is
     * either male or female, and is identified by an ID, which is the ASCII
     * version of the voice name.
     *
     * When synthesizing speech ( SynthesizeSpeech ), you
     * provide the voice ID for the voice you want from the list of voices
     * returned by DescribeVoices.
     *
     * For example, you want your news reader application to read news in
     * a specific language, but giving a user the option to choose the voice.
     * Using the DescribeVoices operation you can provide the user
     * with a list of available voices to select from.
     *
     * You can optionally specify a language code to filter the available
     * voices. For example, if you specify en-US, the operation
     * returns a list of all available US English voices.
     * This operation requires permissions to perform the
     * polly:DescribeVoices action.
     */
    suspend fun describeVoices(block: DescribeVoicesRequest.Builder.() -> Unit) = describeVoices(DescribeVoicesRequest.Builder().apply(block).build())

    /**
     * Returns the content of the specified pronunciation lexicon stored
     * in an Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons.
     */
    suspend fun getLexicon(input: GetLexiconRequest): GetLexiconResponse

    /**
     * Returns the content of the specified pronunciation lexicon stored
     * in an Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons.
     */
    suspend fun getLexicon(block: GetLexiconRequest.Builder.() -> Unit) = getLexicon(GetLexiconRequest.Builder().apply(block).build())

    /**
     * Retrieves a specific SpeechSynthesisTask object based on its TaskID.
     * This object contains information about the given speech synthesis task,
     * including the status of the task, and a link to the S3 bucket containing
     * the output of the task.
     */
    suspend fun getSpeechSynthesisTask(input: GetSpeechSynthesisTaskRequest): GetSpeechSynthesisTaskResponse

    /**
     * Retrieves a specific SpeechSynthesisTask object based on its TaskID.
     * This object contains information about the given speech synthesis task,
     * including the status of the task, and a link to the S3 bucket containing
     * the output of the task.
     */
    suspend fun getSpeechSynthesisTask(block: GetSpeechSynthesisTaskRequest.Builder.() -> Unit) = getSpeechSynthesisTask(GetSpeechSynthesisTaskRequest.Builder().apply(block).build())

    /**
     * Returns a list of pronunciation lexicons stored in an Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons.
     */
    suspend fun listLexicons(input: ListLexiconsRequest): ListLexiconsResponse

    /**
     * Returns a list of pronunciation lexicons stored in an Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons.
     */
    suspend fun listLexicons(block: ListLexiconsRequest.Builder.() -> Unit) = listLexicons(ListLexiconsRequest.Builder().apply(block).build())

    /**
     * Returns a list of SpeechSynthesisTask objects ordered by their
     * creation date. This operation can filter the tasks by their status, for
     * example, allowing users to list only tasks that are completed.
     */
    suspend fun listSpeechSynthesisTasks(input: ListSpeechSynthesisTasksRequest): ListSpeechSynthesisTasksResponse

    /**
     * Returns a list of SpeechSynthesisTask objects ordered by their
     * creation date. This operation can filter the tasks by their status, for
     * example, allowing users to list only tasks that are completed.
     */
    suspend fun listSpeechSynthesisTasks(block: ListSpeechSynthesisTasksRequest.Builder.() -> Unit) = listSpeechSynthesisTasks(ListSpeechSynthesisTasksRequest.Builder().apply(block).build())

    /**
     * Stores a pronunciation lexicon in an Amazon Web Services Region. If
     * a lexicon with the same name already exists in the region, it is
     * overwritten by the new lexicon. Lexicon operations have eventual
     * consistency, therefore, it might take some time before the lexicon is
     * available to the SynthesizeSpeech operation.
     * For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons.
     */
    suspend fun putLexicon(input: PutLexiconRequest): PutLexiconResponse

    /**
     * Stores a pronunciation lexicon in an Amazon Web Services Region. If
     * a lexicon with the same name already exists in the region, it is
     * overwritten by the new lexicon. Lexicon operations have eventual
     * consistency, therefore, it might take some time before the lexicon is
     * available to the SynthesizeSpeech operation.
     * For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons.
     */
    suspend fun putLexicon(block: PutLexiconRequest.Builder.() -> Unit) = putLexicon(PutLexiconRequest.Builder().apply(block).build())

    /**
     * Allows the creation of an asynchronous synthesis task, by starting a
     * new SpeechSynthesisTask. This operation requires all the
     * standard information needed for speech synthesis, plus the name of an
     * Amazon S3 bucket for the service to store the output of the synthesis task
     * and two optional parameters (OutputS3KeyPrefix and
     * SnsTopicArn). Once the synthesis task is created, this
     * operation will return a SpeechSynthesisTask object, which
     * will include an identifier of this task as well as the current status. The
     * SpeechSynthesisTask object is available for 72 hours after
     * starting the asynchronous synthesis task.
     */
    suspend fun startSpeechSynthesisTask(input: StartSpeechSynthesisTaskRequest): StartSpeechSynthesisTaskResponse

    /**
     * Allows the creation of an asynchronous synthesis task, by starting a
     * new SpeechSynthesisTask. This operation requires all the
     * standard information needed for speech synthesis, plus the name of an
     * Amazon S3 bucket for the service to store the output of the synthesis task
     * and two optional parameters (OutputS3KeyPrefix and
     * SnsTopicArn). Once the synthesis task is created, this
     * operation will return a SpeechSynthesisTask object, which
     * will include an identifier of this task as well as the current status. The
     * SpeechSynthesisTask object is available for 72 hours after
     * starting the asynchronous synthesis task.
     */
    suspend fun startSpeechSynthesisTask(block: StartSpeechSynthesisTaskRequest.Builder.() -> Unit) = startSpeechSynthesisTask(StartSpeechSynthesisTaskRequest.Builder().apply(block).build())

    /**
     * Synthesizes UTF-8 input, plain text or SSML, to a stream of bytes.
     * SSML input must be valid, well-formed SSML. Some alphabets might not be
     * available with all the voices (for example, Cyrillic might not be read at
     * all by English voices) unless phoneme mapping is used. For more
     * information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/how-text-to-speech-works.html">How it Works.
     */
    suspend fun <T> synthesizeSpeech(input: SynthesizeSpeechRequest, block: suspend (SynthesizeSpeechResponse) -> T): T
}
